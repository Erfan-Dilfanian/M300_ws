// Generated by gencpp from file forest_fire_detection_system/SegmentSmokeRequest.msg
// DO NOT EDIT!


#ifndef FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SEGMENTSMOKEREQUEST_H
#define FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SEGMENTSMOKEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace forest_fire_detection_system
{
template <class ContainerAllocator>
struct SegmentSmokeRequest_
{
  typedef SegmentSmokeRequest_<ContainerAllocator> Type;

  SegmentSmokeRequest_()
    : timeOut(0.0)  {
    }
  SegmentSmokeRequest_(const ContainerAllocator& _alloc)
    : timeOut(0.0)  {
  (void)_alloc;
    }



   typedef float _timeOut_type;
  _timeOut_type timeOut;





  typedef boost::shared_ptr< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentSmokeRequest_

typedef ::forest_fire_detection_system::SegmentSmokeRequest_<std::allocator<void> > SegmentSmokeRequest;

typedef boost::shared_ptr< ::forest_fire_detection_system::SegmentSmokeRequest > SegmentSmokeRequestPtr;
typedef boost::shared_ptr< ::forest_fire_detection_system::SegmentSmokeRequest const> SegmentSmokeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator1> & lhs, const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timeOut == rhs.timeOut;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator1> & lhs, const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace forest_fire_detection_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27f74a0091364812ffb3f24bfa841d0a";
  }

  static const char* value(const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27f74a0091364812ULL;
  static const uint64_t static_value2 = 0xffb3f24bfa841d0aULL;
};

template<class ContainerAllocator>
struct DataType< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "forest_fire_detection_system/SegmentSmokeRequest";
  }

  static const char* value(const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time to call the smoke segmentation, in seconds\n"
"float32 timeOut\n"
"\n"
;
  }

  static const char* value(const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeOut);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentSmokeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::forest_fire_detection_system::SegmentSmokeRequest_<ContainerAllocator>& v)
  {
    s << indent << "timeOut: ";
    Printer<float>::stream(s, indent + "  ", v.timeOut);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SEGMENTSMOKEREQUEST_H
