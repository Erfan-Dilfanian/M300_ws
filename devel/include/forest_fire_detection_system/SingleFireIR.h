// Generated by gencpp from file forest_fire_detection_system/SingleFireIR.msg
// DO NOT EDIT!


#ifndef FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SINGLEFIREIR_H
#define FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SINGLEFIREIR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace forest_fire_detection_system
{
template <class ContainerAllocator>
struct SingleFireIR_
{
  typedef SingleFireIR_<ContainerAllocator> Type;

  SingleFireIR_()
    : header()
    , img_width(0)
    , img_height(0)
    , resize_img_width(0)
    , resize_img_height(0)
    , target_type(0)
    , img_x(0.0)
    , img_y(0.0)  {
    }
  SingleFireIR_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , img_width(0)
    , img_height(0)
    , resize_img_width(0)
    , resize_img_height(0)
    , target_type(0)
    , img_x(0.0)
    , img_y(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _img_width_type;
  _img_width_type img_width;

   typedef uint16_t _img_height_type;
  _img_height_type img_height;

   typedef uint16_t _resize_img_width_type;
  _resize_img_width_type resize_img_width;

   typedef uint16_t _resize_img_height_type;
  _resize_img_height_type resize_img_height;

   typedef uint8_t _target_type_type;
  _target_type_type target_type;

   typedef float _img_x_type;
  _img_x_type img_x;

   typedef float _img_y_type;
  _img_y_type img_y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IS_BACKGROUND)
  #undef IS_BACKGROUND
#endif
#if defined(_WIN32) && defined(IS_HEAT)
  #undef IS_HEAT
#endif
#if defined(_WIN32) && defined(IS_UNKNOWN)
  #undef IS_UNKNOWN
#endif

  enum {
    IS_BACKGROUND = 0u,
    IS_HEAT = 1u,
    IS_UNKNOWN = 255u,
  };


  typedef boost::shared_ptr< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> const> ConstPtr;

}; // struct SingleFireIR_

typedef ::forest_fire_detection_system::SingleFireIR_<std::allocator<void> > SingleFireIR;

typedef boost::shared_ptr< ::forest_fire_detection_system::SingleFireIR > SingleFireIRPtr;
typedef boost::shared_ptr< ::forest_fire_detection_system::SingleFireIR const> SingleFireIRConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator1> & lhs, const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.img_width == rhs.img_width &&
    lhs.img_height == rhs.img_height &&
    lhs.resize_img_width == rhs.resize_img_width &&
    lhs.resize_img_height == rhs.resize_img_height &&
    lhs.target_type == rhs.target_type &&
    lhs.img_x == rhs.img_x &&
    lhs.img_y == rhs.img_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator1> & lhs, const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace forest_fire_detection_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ea94f8510b24f699c5a36dcda64a4f8";
  }

  static const char* value(const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ea94f8510b24f69ULL;
  static const uint64_t static_value2 = 0x9c5a36dcda64a4f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "forest_fire_detection_system/SingleFireIR";
  }

  static const char* value(const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# image shape\n"
"uint16 img_width\n"
"uint16 img_height\n"
"\n"
"# reszie shape\n"
"uint16 resize_img_width\n"
"uint16 resize_img_height\n"
"\n"
"# target type\n"
"uint8 IS_BACKGROUND = 0\n"
"uint8 IS_HEAT = 1\n"
"uint8 IS_UNKNOWN = 255\n"
"\n"
"uint8 target_type\n"
"\n"
"# the x and y pos (sub-pixel) of the single fire, opencv style coordinates\n"
"float32 img_x\n"
"float32 img_y\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.img_width);
      stream.next(m.img_height);
      stream.next(m.resize_img_width);
      stream.next(m.resize_img_height);
      stream.next(m.target_type);
      stream.next(m.img_x);
      stream.next(m.img_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleFireIR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::forest_fire_detection_system::SingleFireIR_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "img_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.img_width);
    s << indent << "img_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.img_height);
    s << indent << "resize_img_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.resize_img_width);
    s << indent << "resize_img_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.resize_img_height);
    s << indent << "target_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_type);
    s << indent << "img_x: ";
    Printer<float>::stream(s, indent + "  ", v.img_x);
    s << indent << "img_y: ";
    Printer<float>::stream(s, indent + "  ", v.img_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOREST_FIRE_DETECTION_SYSTEM_MESSAGE_SINGLEFIREIR_H
